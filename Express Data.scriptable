{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-gray",
    "glyph" : "file-alt"
  },
  "name" : "Express Data",
  "script" : "\/\/ ====== 前置准备 ======\nlet fm = FileManager.iCloud();\nlet storageFile = fm.joinPath(fm.documentsDirectory(), \"kuaidi.json\");\n\n\/\/ ====== 通用函数 ======\nasync function ensureFileDownloaded(path) {\n  console.log(`[日志] 检查文件是否存在：${path}`);\n  if (!fm.fileExists(path)) {\n    console.log(\"[日志] 文件不存在\");\n    return false;\n  }\n  if (fm.isFileDownloaded(path)) {\n    console.log(\"[日志] 文件已本地存在，无需下载\");\n    return true;\n  }\n  try {\n    await fm.downloadFileFromiCloud(path);\n    console.log(\"[日志] 文件下载完成\");\n    return fm.isFileDownloaded(path);\n  } catch (e) {\n    console.error(\"[日志] 下载 iCloud 文件失败\", e);\n    return false;\n  }\n}\n\n\/\/ ====== Alert \/ 输出函数 ======\nasync function showAlert(title, message) {\n  if (config.runsInApp) {\n    let a = new Alert();\n    a.title = title;\n    if (message) a.message = message;\n    a.addAction(\"确定\");\n    await a.present();\n  } else {\n    Script.setShortcutOutput(message ? `${title}\\n${message}` : title);\n  }\n}\n\n\/\/ ====== 读取\/保存快递数据 ======\nasync function loadParcels() {\n  let ready = await ensureFileDownloaded(storageFile);\n  if (!ready) {\n    console.log(\"[日志] 数据文件不存在或不可用，创建新文件\");\n    fm.writeString(storageFile, JSON.stringify([]));\n    await showAlert(\"首次运行\", \"kuaidi.json 文件已创建，请重新运行脚本\");\n    return [];\n  }\n  try {\n    let raw = fm.readString(storageFile);\n    let data = JSON.parse(raw);\n    if (Array.isArray(data)) return data;\n    if (data && typeof data === \"object\") return [data];\n    return [];\n  } catch (e) {\n    console.error(\"[日志] 读取快递数据失败\", e);\n    await showAlert(\"错误\", \"读取快递数据失败，返回空列表\");\n    return [];\n  }\n}\n\nfunction saveParcels(list) {\n  fm.writeString(storageFile, JSON.stringify(list));\n  console.log(`[日志] 保存快递数据，总条目数: ${list.length}`);\n}\n\n\/\/ ====== 快递解析函数 ======\nfunction parseMessage(msg) {\n  const companies = [\n    \"中通\",\"顺丰\",\"顺丰速运\",\"圆通\",\"申通\",\"韵达\",\"韵达快运\",\"百世\",\"EMS\",\n    \"菜鸟\",\"菜鸟裹裹\",\"菜鸟驿站\",\"京东\",\"京东快递\",\"邮政\",\"天天\",\"德邦\"\n  ];\n\n  let type = \"\", code = \"\", address = \"\";\n\n  \/\/ 快递类型解析\n  let companyMatch = msg.match(\/[【\\[\\(](.+?)[】\\]\\)]\/);\n  if (companyMatch) {\n    let name = companyMatch[1].trim();\n    if (name === \"菜鸟裹裹\") type = \"菜鸟\";\n    else if (name === \"菜鸟驿站\") type = \"驿站\";\n    else type = name.replace(\/(快递|物流|速运|速递|快运|裹裹|快件)$\/g, \"\").trim();\n  }\n  if (!type) {\n    for (let c of companies) {\n      if (msg.includes(c)) {\n        type = c.replace(\/(快递|物流|速运|速递|快运|裹裹|快件)$\/g, \"\").trim();\n        break;\n      }\n    }\n  }\n\n  \/\/ 取件码解析\n  let codeMatch = msg.match(\/(?:取件码|验证码|取件密码|提取码|密码|code)[：:\\s]*([\\w\\d\\-]{4,20})\/i);\n  if (codeMatch) code = codeMatch[1].trim();\n\n  \/\/ 地址解析\n  let addressMatch = msg.match(\/(?:至|取件地址[:：]?|地址[:：]?|派送至[:：]?|快件已到|快件到达|请到|地点[:：]?|领取地址[:：]?)([\\s\\S]+?)(?:取件|领取|请凭码|。|，|,|$)\/);\n  if (addressMatch) address = addressMatch[1].trim();\n  else {\n    let locationMatch = msg.match(\/(?:取件地点|取件柜)[:：]?([\\s\\S]+?)(?:取件|地址|。|，|,|$)\/);\n    if (locationMatch) address = locationMatch[1].trim();\n  }\n\n  let time = new Date().toLocaleString();\n  console.log(`[日志] 解析快递消息: 类型=\"${type}\", 取件码=\"${code}\", 地址=\"${address}\"`);\n  return { type, code, address, time };\n}\n\n\/\/ ====== 批量导入 ======\nasync function addParcelsBatch(msg) {\n  console.log(\"[日志] 开始批量导入快递消息\");\n  let parcels = await loadParcels();\n  let msgs = msg.split(\/\\r?\\n\/).map(s => s.trim()).filter(s => s.length > 0);\n\n  let addedList = []; \/\/ 新增快递类型+取件码列表\n\n  for (let m of msgs) {\n    let newData = parseMessage(m);\n    if (!newData.type || !newData.code || !newData.address) {\n      console.log(\"[日志] 跳过非法快递信息\");\n      continue;\n    }\n\n    let index = parcels.findIndex(p => p.code === newData.code);\n    if (index >= 0) {\n      newData.status = parcels[index].status || \"待取件\";\n      parcels[index] = newData;\n      console.log(`[日志] 更新快递: ${newData.type} - ${newData.code} [${newData.status}]`);\n    } else {\n      newData.status = \"待取件\";\n      parcels.push(newData);\n      addedList.push(`${newData.type} - ${newData.code}`);\n      console.log(`[日志] 新增快递: ${newData.type} - ${newData.code} [${newData.status}]`);\n    }\n  }\n\n  saveParcels(parcels);\n\n  let msgText = addedList.length > 0\n    ? `有新增快递：\\n${addedList.join(\"\\n\")}`\n    : `无新增快递\\n当前总数 ${parcels.length} 条`;\n\n  if (config.runsInApp) {\n    let n = new Notification();\n    n.title = \"快递管家\";\n    n.body = msgText;\n    n.sound = \"default\";\n    await n.schedule();\n  }\n\n  if (config.runsInShortcut) {\n    Script.setShortcutOutput(msgText);\n  } else if (!config.runsInApp) {\n    await showAlert(\"提示\", msgText);\n  } else {\n    await showAlert(\"提示\", \"快递信息已保存\");\n  }\n}\n\n\/\/ ====== 标记状态 ======\nasync function markParcelStatus() {\n  let parcels = await loadParcels();\n  if (parcels.length === 0) {\n    await showAlert(\"提示\", \"暂无快递记录\");\n    return;\n  }\n\n  let selectMenu = new Alert();\n  selectMenu.title = \"选择要标记状态的快递\";\n  parcels.forEach(p => selectMenu.addAction(`${p.type} - ${p.code} [${p.status || \"未取件\"}]`));\n  selectMenu.addCancelAction(\"取消\");\n  let selectIndex = await selectMenu.presentSheet();\n\n  if (selectIndex >= 0 && selectIndex < parcels.length) {\n    let statusMenu = new Alert();\n    statusMenu.title = \"选择快递状态\";\n    statusMenu.addAction(\"未取件\");\n    statusMenu.addAction(\"已取件\");\n    statusMenu.addCancelAction(\"取消\");\n    let statusIndex = await statusMenu.presentSheet();\n\n    if (statusIndex === 0 || statusIndex === 1) {\n      parcels[selectIndex].status = statusIndex === 0 ? \"未取件\" : \"已取件\";\n      saveParcels(parcels);\n      console.log(`[日志] 快递状态更新: ${parcels[selectIndex].type} - ${parcels[selectIndex].code} -> ${parcels[selectIndex].status}`);\n      await showAlert(\"提示\", `快递状态已更新为：${parcels[selectIndex].status}`);\n    }\n  }\n}\n\n\/\/ ====== 脚本启动时检查 JSON 文件 ======\nlet parcelsExist = await ensureFileDownloaded(storageFile);\nif (!parcelsExist) {\n  fm.writeString(storageFile, JSON.stringify([]));\n  await showAlert(\"首次运行\", \"kuaidi.json 文件已创建，请重新运行脚本\");\n  Script.complete();\n}\n\n\/\/ ====== 入口逻辑 ======\nif (typeof args !== \"undefined\" && args.shortcutParameter) {\n  await addParcelsBatch(args.shortcutParameter.replace(\/;\/g,\"\\n\"));\n  Script.complete();\n} else {\n  console.log(\"[日志] 进入脚本主菜单\");\n  let menu = new Alert();\n  menu.title = \"快递管理\";\n  menu.addAction(\"新增快递（多条 ; 分隔导入）\");\n  menu.addAction(\"查看历史\");\n  menu.addAction(\"删除快递\");\n  menu.addAction(\"清空所有\");\n  menu.addAction(\"标记快递状态\");\n  menu.addCancelAction(\"取消\");\n\n  let choice = await menu.presentSheet();\n  console.log(`[日志] 菜单选择: ${choice}`);\n\n  if (choice === 0) {\n    console.log(\"[日志] 用户选择新增快递\");\n    let input = new Alert();\n    input.title = \"输入多条快递信息（用 ; 分隔）\";\n    input.addTextField(\"示例：短信1;短信2;短信3\");\n    input.addAction(\"保存\");\n    input.addCancelAction(\"取消\");\n    let res = await input.presentAlert();\n    if (res === 0) {\n      let rawInput = input.textFieldValue(0).trim();\n      console.log(\"[日志] 输入内容:\", rawInput);\n      if (!rawInput) {\n        console.log(\"[日志] 输入为空，取消导入\");\n        await showAlert(\"提示\", \"输入为空，导入已取消\");\n      } else {\n        let msgs = rawInput.split(\";\").map(s => s.trim());\n        let validMsgs = msgs.filter(s => {\n          let p = parseMessage(s);\n          return p.type && p.code && p.address;\n        });\n        console.log(`[日志] 有效快递数量: ${validMsgs.length}`);\n        if (validMsgs.length === 0) {\n          await showAlert(\"提示\", \"没有合法快递信息，导入已取消\");\n        } else {\n          await addParcelsBatch(validMsgs.join(\"\\n\"));\n        }\n      }\n    }\n  } else if (choice === 1) {\n    console.log(\"[日志] 用户选择查看历史\");\n    let list = await loadParcels();\n    if (list.length === 0) {\n      console.log(\"[日志] 快递记录为空\");\n      await showAlert(\"提示\", \"暂无快递记录\");\n    } else {\n      let display = list.map((p, i) =>\n        `${i + 1}. ${p.type} 取件码:${p.code} [${p.status || \"未取件\"}]\\n${p.address}\\n${p.time}`\n      ).join(\"\\n\\n\");\n      console.log(\"[日志] 显示快递历史\");\n      QuickLook.present(display);\n    }\n  } else if (choice === 2) {\n    console.log(\"[日志] 用户选择删除快递\");\n    let list = await loadParcels();\n    if (list.length === 0) {\n      console.log(\"[日志] 无快递可删除\");\n      await showAlert(\"提示\", \"暂无快递可删除\");\n    } else {\n      let delMenu = new Alert();\n      delMenu.title = \"选择要删除的快递\";\n      list.forEach(p => delMenu.addAction(`${p.type} - ${p.code}`));\n      delMenu.addCancelAction(\"取消\");\n      let delIndex = await delMenu.presentSheet();\n      console.log(`[日志] 删除选择索引: ${delIndex}`);\n      if (delIndex >= 0 && delIndex < list.length) {\n        console.log(`[日志] 删除快递: ${list[delIndex].type} - ${list[delIndex].code}`);\n        list.splice(delIndex, 1);\n        saveParcels(list);\n        await showAlert(\"提示\", \"删除成功\");\n      }\n    }\n  } else if (choice === 3) {\n    console.log(\"[日志] 用户选择清空所有快递\");\n    let confirm = new Alert();\n    confirm.title = \"确认清空所有快递？\";\n    confirm.addAction(\"确认\");\n    confirm.addCancelAction(\"取消\");\n    let confirmRes = await confirm.presentAlert();\n    console.log(`[日志] 清空确认结果: ${confirmRes}`);\n    if (confirmRes === 0) {\n      saveParcels([]);\n      console.log(\"[日志] 所有快递已清空\");\n      await showAlert(\"提示\", \"已清空\");\n    }\n  } else if (choice === 4) {\n    console.log(\"[日志] 用户选择标记快递状态\");\n    await markParcelStatus();\n  } else {\n    console.log(\"[日志] 用户取消操作\");\n  }\n}",
  "share_sheet_inputs" : [

  ]
}